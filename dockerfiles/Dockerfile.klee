FROM klee/klee AS deps

# Ensure we're running as root and set up proper permissions
USER root

# Create necessary directories and set permissions
RUN mkdir -p /var/lib/apt/lists/partial \
    && chmod 755 /var/lib/apt/lists/partial \
    && mkdir -p /var/cache/apt/archives/partial \
    && chmod 755 /var/cache/apt/archives/partial

# Add retry mechanism for apt-get update
RUN set -ex \
    && for i in $(seq 1 3); do \
         apt-get update && break || sleep 5; \
       done \
    && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends --fix-missing \
       ca-certificates \
       curl \
       gdb \
       git \
       gnupg \
       lsb-core \
       lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Add proper repository configuration with retries
RUN set -ex \
    && for i in $(seq 1 3); do \
         lsb_release -a | grep -q "18.04" && ( \
           echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main" >> /etc/apt/sources.list && \
           curl -L https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
         ) || \
         (lsb_release -a | grep -q "20.04") || \
         (lsb_release -a | grep -q "22.04") || (echo "Ubuntu 18.04, 20.04, or 22.04 required!!!" >&2; exit 1) \
         && break || sleep 5; \
       done

# Add retry mechanism for the second apt-get update
RUN set -ex \
    && for i in $(seq 1 3); do \
         apt-get update && break || sleep 5; \
       done \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --fix-missing \
       graphviz \
       clang-12 \
       doxygen \
       libcurl4-openssl-dev \
       llvm-12 \
       python3-dev \
       python3-pip \
       python3-setuptools \
       build-essential \
       cmake \
    && rm -rf /var/lib/apt/lists/*

ENV LLVM_CONFIG=llvm-config-12

FROM deps AS aflpp

# Clone and build AFL++
RUN set -ex \
    && cd /usr/local/src \
    && git clone --depth 1 -b v4.10c https://github.com/AFLplusplus/AFLplusplus.git \
    && cd AFLplusplus \
    && make all \
    && make install \
    && set +ex

FROM aflpp AS vmf

# Clone, build, install VMF
ARG VMF_REPO=https://github.com/draperlaboratory/vadermodularfuzzer.git
RUN set -ex \
    && cd /usr/local/src \
    && git clone --depth 1 ${VMF_REPO} \
    && cd vadermodularfuzzer \
    && mkdir -p build \
    && cd build \
    && cmake -DCMAKE_INSTALL_PREFIX=/usr/local .. \
    && make -j \
    && make install \
    && cd /usr/local/src/vadermodularfuzzer \
    && pip3 install -e . \
    && set +ex

WORKDIR /usr/local/src/vadermodularfuzzer
