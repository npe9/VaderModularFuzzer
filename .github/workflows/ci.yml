name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-latest]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: macos-latest
            compiler: msvc
          - os: windows-2022
            compiler: gcc
          - os: windows-2022
            compiler: clang

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cpplint clang-format

    - name: Set up C++ toolchain
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-12 clang-14

    - name: Set up C++ toolchain
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc@12 llvm@14

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Run tests
      run: |
        ctest --test-dir build --output-on-failure

    - name: Run static analysis
      if: matrix.os == 'ubuntu-22.04'
      run: |
        scan-build cmake --build build

    - name: Run cppcheck
      if: matrix.os == 'ubuntu-22.04'
      run: |
        cppcheck --enable=all --project=build/compile_commands.json

    - name: Check formatting
      run: |
        find . -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run --Werror

  code-quality:
    name: Code Quality
    runs-on: ubuntu-22.04
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cpplint clang-format

    - name: Run cpplint
      run: |
        find . -name '*.cpp' -o -name '*.h' | xargs cpplint

    - name: Generate documentation
      run: |
        doxygen Doxyfile

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Vader'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: reports/ 