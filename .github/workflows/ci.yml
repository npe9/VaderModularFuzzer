name: CI

on:
  push:
    branches: [ main, 'fix/workflow-trigger' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      sign_packages:
        description: 'Sign packages with GPG'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vadermodularfuzzer
  TEST_TIMEOUT: 600  # 10 minutes - Timeout for running test suite with CTest
  FUZZ_TIMEOUT: 300  # 5 minutes - Timeout for each fuzzing test
  SIGN_PACKAGES: ${{ github.event.inputs.sign_packages || false }}

jobs:
  setup-signing:
    name: Setup Package Signing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.sign_packages == 'true'
    
    steps:
      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --passphrase-fd 0 --batch --yes --pinentry-mode loopback --export-secret-keys
      
      - name: Configure GPG
        run: |
          echo "use-agent" > ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      
      - name: Upload GPG configuration
        uses: actions/upload-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
          retention-days: 1

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
      
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/Dockerfile.klee
          build-args: |
            VMF_REPO=https://github.com/${{ github.repository }}.git
          tags: ghcr.io/${{ github.repository_owner }}/vadermodularfuzzer:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
      
      - name: Create test output directories
        run: |
          mkdir -p fuzz_output/magicbytes
          mkdir -p fuzz_output/haystack
      
      - name: Run unit tests
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/vadermodularfuzzer:latest python3 -m pytest test/unit_test.py

      - name: Run system tests
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/vadermodularfuzzer:latest bash -c "cd /usr/local/src/VaderModularFuzzer && python3 test/system_test.sh"
      
      - name: Verify test results
        run: |
          if [ ! -d "fuzz_output" ]; then
            echo "Error: Test output directory not found"
            exit 1
          fi
          
          # Check for crashes in magicbytes
          if [ -d "fuzz_output/magicbytes/crashes" ] && [ "$(ls -A fuzz_output/magicbytes/crashes)" ]; then
            echo "Found crashes in magicbytes test!"
            ls -la fuzz_output/magicbytes/crashes
          fi
          
          # Check for crashes in haystack
          if [ -d "fuzz_output/haystack/crashes" ] && [ "$(ls -A fuzz_output/haystack/crashes)" ]; then
            echo "Found crashes in haystack test!"
            ls -la fuzz_output/haystack/crashes
          fi
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: |
            fuzz_output/magicbytes/
            fuzz_output/haystack/
          retention-days: 5
          if-no-files-found: warn

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-signing]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fix/workflow-trigger')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download GPG configuration
        if: github.event.inputs.sign_packages == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
      
      - name: Build Debian package
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts build-essential lintian gnupg2
          if [ "${{ github.event.inputs.sign_packages }}" = "true" ]; then
            dpkg-buildpackage -k${{ secrets.GPG_KEY_ID }}
          else
            dpkg-buildpackage -us -uc
          fi
          lintian ../*.changes
          mkdir -p build
          mv ../*.deb build/
      
      - name: Build RPM package
        run: |
          sudo apt-get install -y rpm rpm-build
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp -r . ~/rpmbuild/SOURCES/
          if [ "${{ github.event.inputs.sign_packages }}" = "true" ]; then
            rpmbuild -ba --sign --define "_gpg_name ${{ secrets.GPG_KEY_ID }}" ~/rpmbuild/SOURCES/package.spec
          else
            rpmbuild -ba ~/rpmbuild/SOURCES/package.spec
          fi
          mkdir -p build
          cp ~/rpmbuild/RPMS/*/*.rpm build/
      
      - name: Build Arch Linux package
        run: |
          sudo apt-get install -y base-devel
          makepkg --syncdeps --noconfirm
          mkdir -p build
          cp *.pkg.tar.zst build/
      
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ github.sha }}
          path: build/
          retention-days: 5

# Triggering CI workflow with a comment update