name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_packages:
        description: 'Publish packages to repositories'
        required: false
        type: boolean
        default: false
      sign_packages:
        description: 'Sign packages with GPG'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vadermodularfuzzer
  TEST_TIMEOUT: 600  # 10 minutes - Timeout for running test suite with CTest
  FUZZ_TIMEOUT: 300  # 5 minutes - Timeout for each fuzzing test
  SIGN_PACKAGES: ${{ github.event.inputs.sign_packages || false }}
  PUBLISH_PACKAGES: ${{ github.event.inputs.publish_packages || false }}

jobs:
  setup-signing:
    name: Setup Package Signing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.sign_packages == 'true'
    
    steps:
      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --passphrase-fd 0 --batch --yes --pinentry-mode loopback --export-secret-keys
      
      - name: Configure GPG
        run: |
          echo "use-agent" > ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      
      - name: Upload GPG configuration
        uses: actions/upload-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
          retention-days: 1

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
      
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/Dockerfile.klee
          build-args: |
            VMF_REPO=https://github.com/${{ github.repository }}.git
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create test output directories
        run: |
          mkdir -p fuzz_output/magicbytes
          mkdir -p fuzz_output/haystack
      
      - name: Run unit tests
        run: |
          docker run --privileged \
            -v $(pwd):/app \
            -v $(pwd)/fuzz_output:/app/fuzz_output \
            --cap-add=SYS_PTRACE \
            --security-opt seccomp=unconfined \
            ${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
            bash -c "set -e; \
                    echo 'core' > /proc/sys/kernel/core_pattern; \
                    cd /app && \
                    rm -rf build && \
                    mkdir -p build && \
                    cd build && \
                    cmake -DCMAKE_BUILD_TYPE=Debug .. || { echo 'CMake configuration failed'; cat CMakeFiles/CMakeError.log; exit 1; } && \
                    make -j$(nproc) || { echo 'Build failed'; exit 1; } && \
                    timeout ${{ env.TEST_TIMEOUT }} ctest --output-on-failure --verbose"

      - name: Run system tests
        run: |
          docker run --privileged \
            -v $(pwd):/app \
            -v $(pwd)/fuzz_output:/app/fuzz_output \
            --cap-add=SYS_PTRACE \
            --security-opt seccomp=unconfined \
            ${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
            bash -c "set -e; \
                    cd /app && \
                    cd test && \
                    # Build magicbytes SUT
                    cd magicBytesSUT && \
                    make clean || true && make && \
                    cd .. && \
                    # Build haystack SUT
                    cd haystackSUT && \
                    make clean || true && make && \
                    cd .. && \
                    # Run fuzzing tests
                    timeout ${{ env.FUZZ_TIMEOUT }} python3 -m vmf -c config/basicModules.yaml -i magicBytesSUT/inputs -o fuzz_output/magicbytes magicBytesSUT/magicbytes && \
                    timeout ${{ env.FUZZ_TIMEOUT }} python3 -m vmf -c config/basicModules.yaml -i haystackSUT/inputs -o fuzz_output/haystack haystackSUT/haystack"
      
      - name: Verify test results
        run: |
          if [ ! -d "fuzz_output" ]; then
            echo "Error: Test output directory not found"
            exit 1
          fi
          
          # Check for crashes in magicbytes
          if [ -d "fuzz_output/magicbytes/crashes" ] && [ "$(ls -A fuzz_output/magicbytes/crashes)" ]; then
            echo "Found crashes in magicbytes test!"
            ls -la fuzz_output/magicbytes/crashes
          fi
          
          # Check for crashes in haystack
          if [ -d "fuzz_output/haystack/crashes" ] && [ "$(ls -A fuzz_output/haystack/crashes)" ]; then
            echo "Found crashes in haystack test!"
            ls -la fuzz_output/haystack/crashes
          fi
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: |
            fuzz_output/magicbytes/
            fuzz_output/haystack/
          retention-days: 5
          if-no-files-found: warn

  build-debian:
    name: Build Debian Package
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-signing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download GPG configuration
        if: github.event.inputs.sign_packages == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts build-essential lintian gnupg2
      
      - name: Build Debian package
        run: |
          if [ "${{ github.event.inputs.sign_packages }}" = "true" ]; then
            dpkg-buildpackage -k${{ secrets.GPG_KEY_ID }}
          else
            dpkg-buildpackage -us -uc
          fi
          lintian ../*.changes
      
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package-${{ github.sha }}
          path: ../*.deb
          retention-days: 5
      
      - name: Publish to Debian repository
        if: github.event.inputs.publish_packages == 'true'
        run: |
          # Add your Debian repository publishing logic here
          echo "Publishing to Debian repository..."

  build-rpm:
    name: Build RPM Package
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-signing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download GPG configuration
        if: github.event.inputs.sign_packages == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build RPM package
        uses: docker://fedora:latest
        with:
          entrypoint: /bin/bash
          args: |
            -c |
            dnf install -y rpm-build rpmdevtools gnupg2
            rpmdev-setuptree
            cp -r /github/workspace/* /root/rpmbuild/SOURCES/
            cd /root/rpmbuild/SOURCES
            tar czf /root/rpmbuild/SOURCES/vadermodularfuzzer-1.0.0.tar.gz .
            if [ "${{ github.event.inputs.sign_packages }}" = "true" ]; then
              rpmbuild -ba --sign vadermodularfuzzer.spec
            else
              rpmbuild -ba vadermodularfuzzer.spec
            fi
      
      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package-${{ github.sha }}
          path: /root/rpmbuild/RPMS/*/*.rpm
          retention-days: 5
      
      - name: Publish to RPM repository
        if: github.event.inputs.publish_packages == 'true'
        run: |
          # Add your RPM repository publishing logic here
          echo "Publishing to RPM repository..."

  build-arch:
    name: Build Arch Linux Package
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-signing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download GPG configuration
        if: github.event.inputs.sign_packages == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build Arch Linux package
        uses: docker://archlinux:latest
        with:
          entrypoint: /bin/bash
          args: |
            -c |
            pacman -Syu --noconfirm base-devel git gnupg
            useradd -m -G wheel builder
            echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            if [ "${{ github.event.inputs.sign_packages }}" = "true" ]; then
              su builder -c "cd /github/workspace && makepkg -s --sign --noconfirm"
            else
              su builder -c "cd /github/workspace && makepkg -s --noconfirm"
            fi
      
      - name: Upload Arch Linux package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package-${{ github.sha }}
          path: "*.pkg.tar.zst"
          retention-days: 5
      
      - name: Publish to Arch repository
        if: github.event.inputs.publish_packages == 'true'
        run: |
          # Add your Arch repository publishing logic here
          echo "Publishing to Arch repository..."

  build-gentoo:
    name: Build Gentoo Package
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-signing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download GPG configuration
        if: github.event.inputs.sign_packages == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build Gentoo package
        uses: docker://gentoo/stage3:latest
        with:
          entrypoint: /bin/bash
          args: |
            -c |
            emerge --sync
            emerge -v dev-vcs/git app-crypt/gnupg
            cd /github/workspace
            # Add Gentoo ebuild creation and building logic here
            echo "Building Gentoo package..."
      
      - name: Upload Gentoo package
        uses: actions/upload-artifact@v4
        with:
          name: gentoo-package-${{ github.sha }}
          path: "*.tbz2"
          retention-days: 5
      
      - name: Publish to Gentoo repository
        if: github.event.inputs.publish_packages == 'true'
        run: |
          # Add your Gentoo repository publishing logic here
          echo "Publishing to Gentoo repository..."

  build-suse:
    name: Build openSUSE Package
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-signing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download GPG configuration
        if: github.event.inputs.sign_packages == 'true'
        uses: actions/download-artifact@v4
        with:
          name: gpg-config
          path: ~/.gnupg/
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build openSUSE package
        uses: docker://opensuse/leap:latest
        with:
          entrypoint: /bin/bash
          args: |
            -c |
            zypper refresh
            zypper install -y rpm-build rpmdevtools gnupg2
            rpmdev-setuptree
            cp -r /github/workspace/* /root/rpmbuild/SOURCES/
            cd /root/rpmbuild/SOURCES
            tar czf /root/rpmbuild/SOURCES/vadermodularfuzzer-1.0.0.tar.gz .
            if [ "${{ github.event.inputs.sign_packages }}" = "true" ]; then
              rpmbuild -ba --sign vadermodularfuzzer.spec
            else
              rpmbuild -ba vadermodularfuzzer.spec
            fi
      
      - name: Upload openSUSE package
        uses: actions/upload-artifact@v4
        with:
          name: suse-package-${{ github.sha }}
          path: /root/rpmbuild/RPMS/*/*.rpm
          retention-days: 5
      
      - name: Publish to openSUSE repository
        if: github.event.inputs.publish_packages == 'true'
        run: |
          # Add your openSUSE repository publishing logic here
          echo "Publishing to openSUSE repository..."

# Triggering CI workflow with a comment update