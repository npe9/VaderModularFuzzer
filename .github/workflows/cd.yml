name: CD

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vadermodularfuzzer

permissions:
  contents: read
  packages: write

jobs:
  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, centos-8, centos-9, kali]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Debian package
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' || matrix.os == 'kali'
        uses: docker://debian:bullseye
        with:
          entrypoint: /bin/bash
          args: |
            -c |
            apt-get update
            apt-get install -y build-essential debhelper devscripts
            dpkg-buildpackage -us -uc

      - name: Build RPM package
        if: matrix.os == 'centos-8' || matrix.os == 'centos-9'
        uses: docker://centos:8
        with:
          entrypoint: /bin/bash
          args: |
            -c |
            dnf install -y rpm-build rpmdevtools
            rpmbuild -ba SPECS/vadermodularfuzzer.spec

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ github.sha }}
          path: |
            *.deb
            *.rpm
            *.pkg.tar.zst

  deploy:
    name: Deploy to Production
    needs: [build-packages]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_name: [klee, u20, u22, centos8, centos9, kali]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: packages-${{ github.sha }}
          path: build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfiles/Dockerfile.${{ matrix.image_name }}
          build-args: |
            VMF_REPO=https://github.com/${{ github.repository }}.git
            VMF_SHA=${{ github.sha }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image_name }}:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image_name }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true
          target: vmf
          build-contexts: |
            .=./

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*.deb
            build/*.rpm
            build/*.pkg.tar.zst
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GPG for package signing
        if: secrets.GPG_PRIVATE_KEY != '' && secrets.GPG_PASSPHRASE != ''
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --passphrase-fd 0 --batch --yes --pinentry-mode loopback --export-secret-keys --armor > private.key
          gpg --import private.key
          rm private.key

      - name: Sign Debian packages
        if: secrets.GPG_PRIVATE_KEY != '' && secrets.GPG_PASSPHRASE != ''
        run: |
          for deb in build/*.deb; do
            dpkg-sig --sign builder "$deb"
          done

      - name: Sign RPM packages
        if: secrets.GPG_PRIVATE_KEY != '' && secrets.GPG_PASSPHRASE != ''
        run: |
          for rpm in build/*.rpm; do
            rpm --addsign "$rpm"
          done

      - name: Create repository metadata
        run: |
          # Create Debian repository structure
          mkdir -p repo/debian
          cp build/*.deb repo/debian/
          cd repo/debian
          apt-ftparchive packages . > Packages
          apt-ftparchive release . > Release
          if [ "${{ secrets.GPG_PRIVATE_KEY }}" != "" ] && [ "${{ secrets.GPG_PASSPHRASE }}" != "" ]; then
            gpg --armor --detach-sign --output Release.gpg Release
          fi
          cd ../..

          # Create RPM repository structure
          mkdir -p repo/rpm
          cp build/*.rpm repo/rpm/
          cd repo/rpm
          createrepo .
          if [ "${{ secrets.GPG_PRIVATE_KEY }}" != "" ] && [ "${{ secrets.GPG_PASSPHRASE }}" != "" ]; then
            gpg --detach-sign --armor repodata/repomd.xml
          fi
          cd ../..

      - name: Upload repository
        uses: actions/upload-artifact@v4
        with:
          name: repository-${{ github.sha }}
          path: repo/
          retention-days: 90

      - name: Publish repository to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          publish_branch: gh-pages 